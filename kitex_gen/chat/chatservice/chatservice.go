// Code generated by Kitex v0.4.4. DO NOT EDIT.

package chatservice

import (
	"context"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	chat "github.com/wen-flower/easy-douyin/kitex_gen/chat"
)

func serviceInfo() *kitex.ServiceInfo {
	return chatServiceServiceInfo
}

var chatServiceServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "ChatService"
	handlerType := (*chat.ChatService)(nil)
	methods := map[string]kitex.MethodInfo{
		"MessageList":   kitex.NewMethodInfo(messageListHandler, newChatServiceMessageListArgs, newChatServiceMessageListResult, false),
		"MessageAction": kitex.NewMethodInfo(messageActionHandler, newChatServiceMessageActionArgs, newChatServiceMessageActionResult, false),
	}
	extra := map[string]interface{}{
		"PackageName": "chat",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.4.4",
		Extra:           extra,
	}
	return svcInfo
}

func messageListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*chat.ChatServiceMessageListArgs)
	realResult := result.(*chat.ChatServiceMessageListResult)
	success, err := handler.(chat.ChatService).MessageList(ctx, realArg.Param)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newChatServiceMessageListArgs() interface{} {
	return chat.NewChatServiceMessageListArgs()
}

func newChatServiceMessageListResult() interface{} {
	return chat.NewChatServiceMessageListResult()
}

func messageActionHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*chat.ChatServiceMessageActionArgs)
	realResult := result.(*chat.ChatServiceMessageActionResult)
	success, err := handler.(chat.ChatService).MessageAction(ctx, realArg.Param)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newChatServiceMessageActionArgs() interface{} {
	return chat.NewChatServiceMessageActionArgs()
}

func newChatServiceMessageActionResult() interface{} {
	return chat.NewChatServiceMessageActionResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) MessageList(ctx context.Context, param *chat.MessageListParam) (r *chat.MessageListResp, err error) {
	var _args chat.ChatServiceMessageListArgs
	_args.Param = param
	var _result chat.ChatServiceMessageListResult
	if err = p.c.Call(ctx, "MessageList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) MessageAction(ctx context.Context, param *chat.MessageActionParam) (r *chat.MessageActionResp, err error) {
	var _args chat.ChatServiceMessageActionArgs
	_args.Param = param
	var _result chat.ChatServiceMessageActionResult
	if err = p.c.Call(ctx, "MessageAction", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
