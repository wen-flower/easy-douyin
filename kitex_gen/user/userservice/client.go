// Code generated by Kitex v0.4.4. DO NOT EDIT.

package userservice

import (
	"context"
	client "github.com/cloudwego/kitex/client"
	callopt "github.com/cloudwego/kitex/client/callopt"
	user "github.com/wen-flower/easy-douyin/kitex_gen/user"
)

// Client is designed to provide IDL-compatible methods with call-option parameter for kitex framework.
type Client interface {
	CreateUser(ctx context.Context, param *user.CreateUserParam, callOptions ...callopt.Option) (r *user.CreateUserResp, err error)
	CheckUser(ctx context.Context, param *user.CheckUserParam, callOptions ...callopt.Option) (r *user.CheckUserResp, err error)
	QueryUser(ctx context.Context, param *user.QueryUserParam, callOptions ...callopt.Option) (r *user.QueryUserResp, err error)
	FollowUser(ctx context.Context, param *user.FollowUserParam, callOptions ...callopt.Option) (r *user.FollowUserResp, err error)
	FollowList(ctx context.Context, param *user.FollowListParam, callOptions ...callopt.Option) (r *user.FollowListResp, err error)
	FollowerList(ctx context.Context, param *user.FollowerListParam, callOptions ...callopt.Option) (r *user.FollowerListResp, err error)
}

// NewClient creates a client for the service defined in IDL.
func NewClient(destService string, opts ...client.Option) (Client, error) {
	var options []client.Option
	options = append(options, client.WithDestService(destService))

	options = append(options, opts...)

	kc, err := client.NewClient(serviceInfo(), options...)
	if err != nil {
		return nil, err
	}
	return &kUserServiceClient{
		kClient: newServiceClient(kc),
	}, nil
}

// MustNewClient creates a client for the service defined in IDL. It panics if any error occurs.
func MustNewClient(destService string, opts ...client.Option) Client {
	kc, err := NewClient(destService, opts...)
	if err != nil {
		panic(err)
	}
	return kc
}

type kUserServiceClient struct {
	*kClient
}

func (p *kUserServiceClient) CreateUser(ctx context.Context, param *user.CreateUserParam, callOptions ...callopt.Option) (r *user.CreateUserResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.CreateUser(ctx, param)
}

func (p *kUserServiceClient) CheckUser(ctx context.Context, param *user.CheckUserParam, callOptions ...callopt.Option) (r *user.CheckUserResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.CheckUser(ctx, param)
}

func (p *kUserServiceClient) QueryUser(ctx context.Context, param *user.QueryUserParam, callOptions ...callopt.Option) (r *user.QueryUserResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.QueryUser(ctx, param)
}

func (p *kUserServiceClient) FollowUser(ctx context.Context, param *user.FollowUserParam, callOptions ...callopt.Option) (r *user.FollowUserResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.FollowUser(ctx, param)
}

func (p *kUserServiceClient) FollowList(ctx context.Context, param *user.FollowListParam, callOptions ...callopt.Option) (r *user.FollowListResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.FollowList(ctx, param)
}

func (p *kUserServiceClient) FollowerList(ctx context.Context, param *user.FollowerListParam, callOptions ...callopt.Option) (r *user.FollowerListResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.FollowerList(ctx, param)
}
