// Code generated by Kitex v0.4.4. DO NOT EDIT.

package videoservice

import (
	"context"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	video "github.com/wen-flower/easy-douyin/kitex_gen/video"
)

func serviceInfo() *kitex.ServiceInfo {
	return videoServiceServiceInfo
}

var videoServiceServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "VideoService"
	handlerType := (*video.VideoService)(nil)
	methods := map[string]kitex.MethodInfo{
		"CreateVideo": kitex.NewMethodInfo(createVideoHandler, newVideoServiceCreateVideoArgs, newVideoServiceCreateVideoResult, false),
		"PublishList": kitex.NewMethodInfo(publishListHandler, newVideoServicePublishListArgs, newVideoServicePublishListResult, false),
		"VideoFeed":   kitex.NewMethodInfo(videoFeedHandler, newVideoServiceVideoFeedArgs, newVideoServiceVideoFeedResult, false),
	}
	extra := map[string]interface{}{
		"PackageName": "video",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.4.4",
		Extra:           extra,
	}
	return svcInfo
}

func createVideoHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*video.VideoServiceCreateVideoArgs)
	realResult := result.(*video.VideoServiceCreateVideoResult)
	success, err := handler.(video.VideoService).CreateVideo(ctx, realArg.Param)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newVideoServiceCreateVideoArgs() interface{} {
	return video.NewVideoServiceCreateVideoArgs()
}

func newVideoServiceCreateVideoResult() interface{} {
	return video.NewVideoServiceCreateVideoResult()
}

func publishListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*video.VideoServicePublishListArgs)
	realResult := result.(*video.VideoServicePublishListResult)
	success, err := handler.(video.VideoService).PublishList(ctx, realArg.Param)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newVideoServicePublishListArgs() interface{} {
	return video.NewVideoServicePublishListArgs()
}

func newVideoServicePublishListResult() interface{} {
	return video.NewVideoServicePublishListResult()
}

func videoFeedHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*video.VideoServiceVideoFeedArgs)
	realResult := result.(*video.VideoServiceVideoFeedResult)
	success, err := handler.(video.VideoService).VideoFeed(ctx, realArg.Param)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newVideoServiceVideoFeedArgs() interface{} {
	return video.NewVideoServiceVideoFeedArgs()
}

func newVideoServiceVideoFeedResult() interface{} {
	return video.NewVideoServiceVideoFeedResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) CreateVideo(ctx context.Context, param *video.CreateVideoParam) (r *video.CreateVideoResp, err error) {
	var _args video.VideoServiceCreateVideoArgs
	_args.Param = param
	var _result video.VideoServiceCreateVideoResult
	if err = p.c.Call(ctx, "CreateVideo", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) PublishList(ctx context.Context, param *video.PublishListParam) (r *video.PublishListResp, err error) {
	var _args video.VideoServicePublishListArgs
	_args.Param = param
	var _result video.VideoServicePublishListResult
	if err = p.c.Call(ctx, "PublishList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) VideoFeed(ctx context.Context, param *video.VideoFeedParam) (r *video.VideoFeedResp, err error) {
	var _args video.VideoServiceVideoFeedArgs
	_args.Param = param
	var _result video.VideoServiceVideoFeedResult
	if err = p.c.Call(ctx, "VideoFeed", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
